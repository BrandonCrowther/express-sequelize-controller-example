{"version":3,"sources":["Posts.js","App.js","serviceWorker.js","index.js"],"names":["Posts","props","state","error","isLoaded","posts","postText","handleChange","bind","submitPost","fetch","req","json","res","console","log","this","setState","event","target","value","method","mode","headers","body","JSON","stringify","Post","post","newPosts","push","id","status","filter","p","className","map","key","type","aria-label","onClick","e","deletePost","aria-hidden","onChange","Button","variant","Spinner","animation","role","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oTA0GeA,G,wDApGd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,MAAO,KACPC,UAAU,EACVC,MAAO,GACPC,SAAU,IAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBATA,E,kMAaAE,MAAM,kC,cAAlBC,E,gBACYA,EAAIC,O,OAAhBC,E,OACNC,QAAQC,IAAIF,GACZG,KAAKC,SAAS,CACbb,UAAU,EACVC,MAAOQ,I,yIAKIK,GACZF,KAAKC,SAAS,CAACX,SAAUY,EAAMC,OAAOC,U,uKAKpBV,MAAM,wCAAyC,CAChEW,OAAQ,OACRC,KAAM,OACNC,QAAS,CACR,eAAgB,oBAEjBC,KAAMC,KAAKC,UACV,CAACC,KAAM,CACNC,KAAMZ,KAAKd,MAAMI,c,cARdO,E,gBAYaA,EAAID,O,OAAjBA,E,QAGFiB,EAAWb,KAAKd,MAAMG,OACjByB,KAAKlB,GAEdI,KAAKC,SAAS,CAAEZ,MAAOwB,EAAUvB,SAAU,K,gLAI3ByB,G,uFACErB,MAAM,yCAAD,OAA0CqB,GAAM,CACtEV,OAAQ,OACRC,KAAM,S,OAEU,K,OAAVU,SACAH,EAAWb,KAAKd,MAAMG,MAAM4B,QAAO,SAAAC,GAAC,OAAIA,EAAEH,IAAMA,KACtDf,KAAKC,SAAS,CAAEZ,MAAOwB,K,sIAKf,IAAD,SAC8Bb,KAAKd,MAAnCE,EADA,EACAA,SAAUC,EADV,EACUA,MAAOC,EADjB,EACiBA,SAEzB,OAAIF,EAQH,6BACC,uCACA,yBAAK+B,UAAU,SACb9B,EAAM+B,KAAI,SAAAF,GAAC,OACX,yBAAKC,UAAU,OAAOE,IAAKH,EAAEH,IAC5B,4BAAQO,KAAK,SAASH,UAAU,QAAQI,aAAW,QAAQC,QAAS,SAACC,GAAD,OAAO,EAAKC,WAAWR,EAAEH,MAC5F,0BAAMY,cAAY,QAAlB,SAED,2BACET,EAAEN,WAKP,6BACA,yBAAKO,UAAU,WACd,0CACA,8BAAUf,MAAOd,EAAUsC,SAAU5B,KAAKT,eAC1C,6BACA,kBAACsC,EAAA,EAAD,CAAQC,QAAQ,OAAON,QAASxB,KAAKP,YAArC,iBAzBD,kBAACsC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAChC,0BAAMd,UAAU,WAAhB,mB,GAtEee,IAAMC,Y,MCSXC,MAVf,WACE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlE,GACLW,QAAQX,MAAMA,EAAMmE,c","file":"static/js/main.4b283d02.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './Posts.css';\n\nclass Posts extends React.Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\terror: null,\n\t\t\tisLoaded: false,\n\t\t\tposts: [],\n\t\t\tpostText: \"\"\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.submitPost = this.submitPost.bind(this);\n\t}\n\t\n\tasync componentDidMount() {\n\t\tconst req = await fetch(`http://localhost:3000/api/post`)\n\t\tconst res = await req.json()\n\t\tconsole.log(res)\n\t\tthis.setState({\n\t\t\tisLoaded: true,\n\t\t\tposts: res\n\t\t});\n\t}\n\n\n\thandleChange(event) {\n\t\tthis.setState({postText: event.target.value});\n\t}\n\n\n\tasync submitPost(){\n\t\tconst res = await fetch(`http://localhost:3000/api/post/create`, {\n\t\t\tmethod: \"POST\",\n\t\t\tmode: \"cors\",\n\t\t\theaders: { \n\t\t\t\t\"Content-Type\": \"application/json\" \n\t\t\t},\n\t\t\tbody: JSON.stringify(\n\t\t\t\t{Post: {\n\t\t\t\t\tpost: this.state.postText\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\tconst json = await res.json()\n\n\t\t\n\t\tlet newPosts = this.state.posts\n\t\tnewPosts.push(json)\n\n\t\tthis.setState({ posts: newPosts, postText: \"\"});\n\t}\n\n\n\tasync deletePost(id){\n\t\tconst res = await fetch(`http://localhost:3000/api/post/delete/${id}`, {\n\t\t\tmethod: \"POST\", // Could also be delete. CORS issues /shrug\n\t\t\tmode: \"cors\"\n\t\t})\n\t\tif(res.status == 200){\n\t\t\tconst newPosts = this.state.posts.filter(p => p.id != id)\n\t\t\tthis.setState({ posts: newPosts });\n\t\t}\n\t}\n\t\n\t\n\trender() {\n\t\tconst { isLoaded, posts, postText } = this.state;\n\n\t\tif(!isLoaded){\n\t\t\treturn (\n\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\n\t\t\t\t</Spinner>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1> Posts </h1>\n\t\t\t\t<div className=\"Posts\">\n\t\t\t\t\t{posts.map(p => (\n\t\t\t\t\t\t<div className=\"Post\" key={p.id}>\n\t\t\t\t\t\t\t<button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={(e) => this.deletePost(p.id)}>\n\t\t\t\t\t\t\t\t<span aria-hidden=\"true\">&times;</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t{p.post}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"addForm\">\n\t\t\t\t\t<h4>Add a Post</h4>\n\t\t\t\t\t<textarea value={postText} onChange={this.handleChange}></textarea>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<Button variant=\"dark\" onClick={this.submitPost}>Submit Post</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\t\t\t\n}\nexport default Posts;\n\t\t","import React from 'react';\nimport Posts from './Posts'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Posts></Posts>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}